{
  "_args": [
    [
      {
        "raw": "react-google-oauth",
        "scope": null,
        "escapedName": "react-google-oauth",
        "name": "react-google-oauth",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\googleFit-web"
    ]
  ],
  "_from": "react-google-oauth@latest",
  "_id": "react-google-oauth@1.0.0",
  "_inCache": true,
  "_location": "/react-google-oauth",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-google-oauth-1.0.0.tgz_1511638314060_0.5054790826980025"
  },
  "_npmUser": {
    "name": "cyrilsiman",
    "email": "csiman.phone@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {
    "create-react-class": "15.6.3",
    "fbjs": "0.8.16",
    "loose-envify": "1.3.1",
    "object-assign": "4.1.1",
    "prop-types": "15.6.0"
  },
  "_requested": {
    "raw": "react-google-oauth",
    "scope": null,
    "escapedName": "react-google-oauth",
    "name": "react-google-oauth",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-google-oauth/-/react-google-oauth-1.0.0.tgz",
  "_shasum": "da65f41a4568cc69e44abc0b58fe0b4a97ab228e",
  "_shrinkwrap": null,
  "_spec": "react-google-oauth",
  "_where": "E:\\googleFit-web",
  "author": {
    "name": "Cyril Siman"
  },
  "babel": {
    "presets": [
      "react-app"
    ]
  },
  "bugs": {
    "url": "https://github.com/CyrilSiman/react-google-oauth/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.10",
    "react": "^15.6.1"
  },
  "description": "A Google OAuth component for React",
  "devDependencies": {
    "autoprefixer": "^7.1.2",
    "babel-cli": "^6.24.1",
    "babel-eslint": "^7.2.3",
    "babel-jest": "^20.0.3",
    "babel-loader": "^7.1.1",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react-app": "^3.0.2",
    "case-sensitive-paths-webpack-plugin": "^2.1.1",
    "clean-webpack-plugin": "^0.1.16",
    "css-loader": "^0.28.4",
    "deep-freeze": "0.0.1",
    "enzyme": "^2.9.1",
    "eslint": "^4.4.1",
    "eslint-config-react-app": "^2.0.0",
    "eslint-loader": "^1.9.0",
    "eslint-plugin-flowtype": "^2.35.0",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-jsx-a11y": "^5.1.1",
    "eslint-plugin-react": "^7.1.0",
    "file-loader": "^0.11.2",
    "invariant": "^2.2.2",
    "jest": "^20.0.4",
    "jest-css-modules": "^1.1.0",
    "postcss-flexbugs-fixes": "^3.2.0",
    "postcss-loader": "^2.0.6",
    "react-addons-test-utils": "^15.6.0",
    "react-test-renderer": "^15.6.1",
    "style-loader": "^0.18.2",
    "webpack": "^3.5.1",
    "webpack-dev-server": "^2.7.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-3xSQ+XVwZajjm3vpzbzXUOrZG0AxJ6M+Ri0CdcbA2dj4ai2/8DlVEFrEVikH74r81BWo0RY60h+WyQ458C2+iw==",
    "shasum": "da65f41a4568cc69e44abc0b58fe0b4a97ab228e",
    "tarball": "https://registry.npmjs.org/react-google-oauth/-/react-google-oauth-1.0.0.tgz"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "gitHead": "315bbd9640b3e96b93af9bec97c7e10603bf150f",
  "homepage": "https://github.com/CyrilSiman/react-google-oauth#readme",
  "jest": {
    "verbose": true,
    "moduleNameMapper": {
      "\\.( css) $": "< rootDir >/ node_modules/ jest-css-modules"
    }
  },
  "keywords": [
    "React",
    "Google",
    "Oauth",
    "Login",
    "Logout"
  ],
  "license": "MIT",
  "main": "dist/react-google-oauth.js",
  "maintainers": [
    {
      "name": "cyrilsiman",
      "email": "csiman.phone@gmail.com"
    }
  ],
  "name": "react-google-oauth",
  "optionalDependencies": {},
  "readme": "# react-google-oauth\n\n*Directly inspired from [react-google-login](https://github.com/anthonyjgrove/react-google-login) project.*\n\nWith react-google-oauth you can quickly and easly add Login and Logout Google button.\n\n![Google button with hover state](https://i.imgur.com/PDgUgJW.gif)\n\n\n\n# How it works\n\nThis module is composed by two kind of components :\n\n- \\<GoogleAPI> used to inject and initialize the Google Api with your Google client ID, follow this [Google's documentation](https://developers.google.com/identity/sign-in/web/devconsole-project) to get yours\n- \\<GoogleLogin> \\<GoogleLogout> \\<CustomGoogleLogin> \\<CustomGoogleLogout> components used to display buttons and connect each *clickEvents* to Google Oauth Api.\n\n# Install\n\n```bash\nnpm install react-google-oauth\n```\n\n# How use it\n\n## 1°) Inject and init Google API script\n\nAdd \\<GoogleAPI> component in your tree\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GoogleAPI} from 'react-google-oauth'\n\nReactDOM.render(\n        <GoogleAPI clientId=\"YOUR CLIENT ID\"\n            onUpdateSigninStatus={Function}\n            onInitFailure={Function} >\n         \t<YourApp />\n        </GoogleAPI>, document.getElementById('root'));\n```\n\nBy default the Google API is initialize to make a simple Oauth with profile...\n\n**Caution** : As other React component \\<GoogleAPI> can have only one child\n\n### GooleApi props\n\nSee [Google documentation](https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2clientconfig) for complet values\n\n| Parameters           | Default value             | Comment                                  | Type   |\n| -------------------- | ------------------------- | ---------------------------------------- | ------ |\n| clientId             | **REQUIRED**              |                                          | String |\n| responseType         | 'permission'              |                                          | String |\n| Prompt               | ''                        | [Doc](https://developers.google.com/identity/protocols/OpenIDConnect#prompt) | String |\n| cookiePolicy         | 'single_host_origin'      |                                          | String |\n| fetchBasicProfile    | true                      | Automatically add profile and email in Scope see [Doc](https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2clientconfig) | Bool   |\n| uxMode               | 'popup'                   |                                          | String |\n| hostedDomain         | None                      |                                          | String |\n| redirectUri          | None                      |                                          | String |\n| Scope                | ''                        | More scope on this [page](https://developers.google.com/identity/protocols/googlescopes) | String |\n| onUpdateSigninStatus | f => f                    | See below                                | Func   |\n| onInitFailure        | err => console.error(err) | See below                                | Func   |\n\n\n\n#### onUpdateSigninStatus  - Callback\n\n[Doc](https://developers.google.com/api-client-library/javascript/reference/referencedocs#googleauthissignedinlistenlistener) : listen for changes in the current user's sign-in state\n\nA function that takes a boolean value. Passes `true` to this function when the user signs in, and `false` when the user signs out.\n\n\n\n#### onInitFailure - Callback\n\nThe function called with an object containing an `error` property, if `GoogleAuth` failed to initialize\n\n\n\n## 2°) Add a button\n\nAdd a button component under GoogleAPI *(each button component check if it is a child of GoogleAPI, if not an error message is displayed)*\n\n```Jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GoogleAPI,GoogleLogin,GoogleLogout} from 'react-google-oauth'\n\nReactDOM.render(\n        <GoogleAPI clientId=\"YOUR CLIENT ID\"\n            onUpdateSigninStatus={CALLBACK}\n            onInitFailure={CALLBACK} >\n\t\t\t<div>\n              \t<div><GoogleLogin /></div>\n              \t<div><GoogleLogout /></div>\n    \t\t</div>\n        </GoogleAPI>, document.getElementById('root'));\n```\n\n\n\n### GoogleLogin params\n\n| Callback                 | Default value          | Comment                                  |\n| ------------------------ | ---------------------- | ---------------------------------------- |\n| onLoginSuccess(response) | f => f                 | Function called when the authentification is done. Maybe it's more preferable to use onUpdateSigninStatus from \\<GoogleAPI>. Fulfilled with the `GoogleUser` instance when the user successfully authenticates and grants the requested scopes. |\n| onLoginFailure(error)    | f => f                 | function called when a error occured. By example when a user closed the Google's popup before he choiced an account. This function take an object containing an error property. See <a href=\"https://developers.google.com/identity/sign-in/web/reference#googleauthsigninoptions\" >Error Code</a> on Google's documentation for more details. |\n| onRequest()              | f => f                 | Called just before the call to Google Api Script, you can used this callback to display a loader by example. None parameter. |\n| Text                     | ' Sign in with Google' | Text displayed in button                 |\n| backgroundColor          | \\#4285f4               | See Rendering paragraph                  |\n| disabled                 | False                  | See Rendering paragraph                  |\n| width                    | 240px                  | See Rendering paragraph                  |\n\n\n\n### GoogleLogout params\n\n| Callback               | Default value          | Comment                                  |\n| ---------------------- | ---------------------- | ---------------------------------------- |\n| onLogoutSuccess()      | f => f                 | Function called when the user has been signed out |\n| onLogoutFailure(error) | f => f                 | function called when a error occured.  This function take an object containing an error property. See <a href=\"https://developers.google.com/identity/sign-in/web/reference#googleauthsigninoptions\" >Error Code</a> on Google's documentation for more details. |\n| onRequest()            | f => f                 | Called just before the call to Google Api Script, you can used this callback to display a loader by example. None parameter. |\n| Text                   | ' Sign in with Google' | Text displayed in button                 |\n| backgroundColor        | \\#4285f4               | See Rendering paragraph                  |\n| disabled               | False                  | See Rendering paragraph                  |\n| width                  | 240px                  | See Rendering paragraph                  |\n\n\n\n\n\n# Rendering\n\n## \\<GoogleLogin> & \\<GoogleLogout>\n\nWithout parameters, buttons look like this :\n\n```\n<GoogleLogin />\n<GoogleLogout />\n```\n\n![GoogleLogin button](https://i.imgur.com/LvEQ6yz.png) ![GoogleLogout button](https://i.imgur.com/SiR83vT.png)\n\n## Text, Color, Width\n\nWith pre-define rendering you can only change the text, the  width and the background color.\n\n*Sample*\n\n```jsx\n<GoogleLogin \n  \tbackgroundColor=\"#A31515\" \n  \ttext=\"login\"\n  \twidth=\"180px\"\n  \t/>\n```\n\n![Red GoogleLogin button](https://i.imgur.com/3LD3FTF.png)\n\n*Hover and active state are automaticaly generate (opacity 50% for Hover state and filter:brightness(80%) for active state.)*\n\n**Login button**\n\n| Parameter       | Default value       |\n| --------------- | ------------------- |\n| text            | Sign in with Google |\n| width           | 240px               |\n| backgroundColor | \\#4285f4            |\n\n**Logout button**\n\n| Parameter       | Default value |\n| --------------- | ------------- |\n| text            | Sign out      |\n| width           | 180px         |\n| backgroundColor | \\#A31515      |\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/CyrilSiman/react-google-oauth.git"
  },
  "scripts": {
    "build": "BABEL_ENV=development webpack --config ./webpack.config.dev.js --watch",
    "start": "webpack --config ./config/webpack.config.dev.js",
    "test": "jest --coverage"
  },
  "version": "1.0.0"
}
